rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Events collection
    match /events/{eventId} {
      allow read: if true; // Public read for certificate retrieval
      allow write: if isAdmin();
      
      // Participants subcollection
      match /participants/{participantId} {
        allow read: if true; // Public read for certificate search
        allow write: if isAdmin();
        
        // Validate participant data structure
        allow create: if isAdmin() && 
          validateParticipantData(request.resource.data);
        allow update: if isAdmin() && 
          validateParticipantData(request.resource.data);
      }
    }
    
    // Admin collection
    match /admins/{adminId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == adminId;
    }
    
    // Invites collection
    match /invites/{email} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Analytics collection (if used)
    match /analytics/{document} {
      allow read, write: if isAdmin();
    }
  }
  
  function isAdmin() {
    return request.auth != null && 
           exists(/databases/$(database)/documents/admins/$(request.auth.uid));
  }
  
  function validateParticipantData(data) {
    return data.keys().hasAll(['name', 'email']) &&
           data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
           data.email is string && data.email.matches('.*@.*\\..*') &&
           data.email.size() <= 254 &&
           (data.certificateStatus == null || data.certificateStatus in ['pending', 'downloaded']) &&
           (data.additionalFields == null || data.additionalFields is map);
  }
}
